do $$
begin
  if not exists (
    select 1
    from pg_type
    where typname = 'trademark_application_status'
      and typnamespace = 'public'::regnamespace
  ) then
    create type public.trademark_application_status as enum (
      'draft',
      'awaiting_payment',
      'payment_received',
      'preparing_filing',
      'filed',
      'office_action',
      'rejected',
      'completed',
      'cancelled'
    );
  end if;
end;
$$;

-- Helper function to determine if the caller is an administrator or service role
create or replace function public.is_admin_context()
returns boolean
language plpgsql
as $$
declare
  claims jsonb := coalesce(auth.jwt()::jsonb, '{}'::jsonb);
  is_admin_flag boolean;
begin
  begin
    is_admin_flag := (claims ->> 'is_admin')::boolean;
  exception
    when others then
      is_admin_flag := false;
  end;

  return coalesce(
    (claims ->> 'role') in ('service_role', 'supabase_admin') or
    is_admin_flag or
    (claims -> 'app_metadata' ->> 'role') = 'admin' or
    (coalesce((claims -> 'app_metadata' -> 'roles')::jsonb, '[]'::jsonb) ? 'admin'),
    false
  );
end;
$$;

-- Sequence for management numbers
create sequence if not exists public.trademark_management_number_seq
  increment 1
  minvalue 1
  start with 1;

-- Main applications table
create table if not exists public.trademark_applications (
  id uuid primary key default gen_random_uuid(),
  request_id uuid references public.trademark_requests(id) on delete set null,
  user_id uuid references auth.users(id) on delete set null,
  management_number text not null unique default (
    'TM' || to_char(nextval('public.trademark_management_number_seq'), 'FM000000')
  ),
  brand_name text not null,
  normalized_brand_name text generated always as (
    lower(regexp_replace(brand_name, '\\s+', ' ', 'g'))
  ) stored,
  trademark_type text,
  product_classes text[] not null default '{}',
  goods_description text,
  status public.trademark_application_status not null default 'draft',
  status_detail text,
  status_updated_at timestamptz not null default now(),
  payment_amount numeric(12,2),
  payment_currency text,
  payment_due_at timestamptz,
  payment_reference text,
  payment_received_at timestamptz,
  filing_receipt_number text,
  filing_submission_reference text,
  filing_submitted_at timestamptz,
  filed_at timestamptz,
  filing_office text,
  assigned_to uuid references auth.users(id) on delete set null,
  notes text,
  metadata jsonb not null default '{}'::jsonb,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

comment on table public.trademark_applications is 'Formal trademark applications derived from onboarding requests.';
comment on column public.trademark_applications.management_number is 'Sequential human-readable identifier (e.g. TM000123).';
comment on column public.trademark_applications.status is 'Business workflow status for the application.';
comment on column public.trademark_applications.status_detail is 'Optional explanation displayed to applicants.';
comment on column public.trademark_applications.product_classes is 'Nice classification classes associated with the filing.';

create index if not exists trademark_applications_user_id_idx on public.trademark_applications (user_id);
create index if not exists trademark_applications_management_number_idx on public.trademark_applications (management_number);
create index if not exists trademark_applications_status_idx on public.trademark_applications (status);
create index if not exists trademark_applications_normalized_brand_idx on public.trademark_applications (normalized_brand_name);

-- Status log table
create table if not exists public.trademark_status_logs (
  id bigint generated by default as identity primary key,
  application_id uuid not null references public.trademark_applications(id) on delete cascade,
  from_status public.trademark_application_status,
  to_status public.trademark_application_status not null,
  note text,
  metadata jsonb not null default '{}'::jsonb,
  changed_by uuid references auth.users(id) on delete set null,
  changed_at timestamptz not null default now()
);

create index if not exists trademark_status_logs_application_idx on public.trademark_status_logs (application_id, changed_at desc);

-- Normalized brand name index on requests to support duplicate checks
alter table public.trademark_requests
  add column if not exists normalized_brand_name text generated always as (
    lower(regexp_replace(brand_name, '\\s+', ' ', 'g'))
  ) stored;

create index if not exists trademark_requests_normalized_brand_idx on public.trademark_requests (normalized_brand_name);

-- Trigger to maintain updated_at
create or replace function public.set_current_timestamp()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = now();
  return new;
end;
$$;

create trigger set_timestamp_trademark_applications
  before update on public.trademark_applications
  for each row
  execute function public.set_current_timestamp();

-- Enable RLS
alter table public.trademark_applications enable row level security;
alter table public.trademark_status_logs enable row level security;

-- Policies for applicants
create policy if not exists "Users can manage their own applications"
  on public.trademark_applications
  for select
  using (auth.uid() = user_id);

create policy if not exists "Users can insert their own applications"
  on public.trademark_applications
  for insert
  with check (auth.uid() = user_id);

create policy if not exists "Users can update their own draft applications"
  on public.trademark_applications
  for update
  using (auth.uid() = user_id and status = 'draft')
  with check (auth.uid() = user_id and status = 'draft');

-- Admin/service policies
create policy if not exists "Admins can access all applications"
  on public.trademark_applications
  for all
  using (public.is_admin_context())
  with check (public.is_admin_context());

-- Log policies
create policy if not exists "Users can view logs for their applications"
  on public.trademark_status_logs
  for select
  using (
    exists (
      select 1
      from public.trademark_applications ta
      where ta.id = application_id and ta.user_id = auth.uid()
    )
  );

create policy if not exists "Admins can manage status logs"
  on public.trademark_status_logs
  for all
  using (public.is_admin_context())
  with check (public.is_admin_context());

-- Storage policies for the trademark-images bucket
do $$
begin
  if not exists (select 1 from storage.buckets where id = 'trademark-images') then
    perform storage.create_bucket(
      'trademark-images',
      jsonb_build_object(
        'public', false,
        'file_size_limit', 5242880
      )
    );
  end if;
end;
$$;

alter bucket "trademark-images" set (public = false);

create policy if not exists "Users can upload their trademark images"
  on storage.objects
  for insert
  with check (
    bucket_id = 'trademark-images' and
    auth.uid() = owner
  );

create policy if not exists "Users can read their trademark images"
  on storage.objects
  for select
  using (
    bucket_id = 'trademark-images' and
    (owner = auth.uid() or public.is_admin_context())
  );

create policy if not exists "Users can delete their trademark images"
  on storage.objects
  for delete
  using (
    bucket_id = 'trademark-images' and
    auth.uid() = owner
  );

create policy if not exists "Admins can manage all trademark images"
  on storage.objects
  for all
  using (
    bucket_id = 'trademark-images' and
    public.is_admin_context()
  );
